{"version":3,"sources":["components/user.js","components/userList.js","components/App.js","serviceWorker.js","index.js"],"names":["User","props","className","onClick","name","UserList","state","users","openId","length","handleClick","bind","addUser","id","this","setState","prevState","filter","user","event","document","getElementById","value","keyCode","preventDefault","concat","userList","map","key","type","placeholder","onKeyDown","React","Component","init_users","App","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qLAiBeA,MATf,SAAcC,GACV,OACI,yBAAKC,UAAU,QACX,4BAAQC,QAASF,EAAME,SAAU,UACjC,8BAAOF,EAAMG,QCyEVC,E,kDAxEX,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CACTC,MAAON,EAAMM,MACbC,OAAQP,EAAMM,MAAME,QAIxB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBATA,E,wDAiBPE,GACRC,KAAKC,UAAS,SAAAC,GAAS,MAAK,CACxBT,MAAOS,EAAUT,MAAMU,QAAO,SAAAC,GAAI,OAAIA,EAAKL,KAAOA,W,8BAWlDM,GACJ,IAAMf,EAAOgB,SAASC,eAAe,YAAYC,MAEjD,GAAqB,KAAlBH,EAAMI,SAA2B,KAATnB,EAAa,CACpCe,EAAMK,iBAGN,IAAMX,EAAKC,KAAKR,MAAME,OAEtBM,KAAKC,UAAS,SAAAC,GAAS,MAAK,CACxBT,MAAOS,EAAUT,MAAMkB,OAAO,CAACZ,GAAIA,EAAIT,KAAMA,IAC7CI,OAAQQ,EAAUR,aAGtBY,SAASC,eAAe,YAAYC,MAAQ,M,+BAS1C,IAAD,OACCI,EAAWZ,KAAKR,MAAMC,MAAMoB,KAAI,SAACT,GAAD,OAClC,kBAAC,EAAD,CAAMU,IAAKV,EAAKL,GACVT,KAAMc,EAAKd,KACXD,QAAS,kBAAM,EAAKO,YAAYQ,EAAKL,UAG/C,OACI,yBAAKX,UAAU,aACX,2BAAO2B,KAAK,OACLC,YAAY,oBACZjB,GAAG,WACHkB,UAAW,SAACZ,GAAD,OAAW,EAAKP,QAAQO,MACzCO,O,GAzEMM,IAAMC,WCEzBC,EAAa,CACf,CAACrB,GAAI,EAAGT,KAAM,WACd,CAACS,GAAI,EAAGT,KAAM,QACd,CAACS,GAAI,EAAGT,KAAM,QACd,CAACS,GAAI,EAAGT,KAAM,WA8BD+B,E,uKAhBX,OACE,yBAAKjC,UAAU,OACb,4BAAQA,UAAU,cAChB,oDAIA,yBAAKkC,MAAM,OACT,0BAAMA,MAAM,iBAAZ,0BACA,kBAAC,EAAD,CAAU7B,MAAO2B,U,GAjBXF,IAAMC,WCNJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASC,eAAe,SD0HpB,kBAAmBwB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a9eba6d7.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * Outputs the JSX for a User in our current UserList.\n * \n * @param {Object} props The properties of a User.\n * @returns {JSX.Element} The current layout of the User.\n */\nfunction User(props) {\n    return (\n        <div className=\"User\">\n            <button onClick={props.onClick}>{\"Remove\"}</button>\n            <span>{props.name}</span>\n        </div>\n    );\n}\n\nexport default User;","import React from 'react';\nimport User from './user';\n\n/**\n * @class UserList representing a list of users currently watching a video together\n */\nclass UserList extends React.Component {\n    /**\n     * Creates an instance of a UserList.\n     * \n     * @constructor\n     * @param {Object} props The properties of a UserList.\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            users: props.users,\n            openId: props.users.length\n        };\n        \n        // Allows for the button events passed to the users to affect the list\n        this.handleClick = this.handleClick.bind(this);\n        this.addUser = this.addUser.bind(this);\n    }\n\n    /**\n     * Removes a User with the given id from the UserList.\n     * \n     * @param {number} id The id of the User to be deleted.\n     */\n    handleClick(id) {\n        this.setState(prevState => ({\n            users: prevState.users.filter(user => user.id !== id)\n        }));\n        \n    }\n\n    /**\n     * Adds a User to the UserList once text has been written in the textbar\n     * and the user has pressed the enter key.\n     * \n     * @param {keydown} event The event we are listening for on the keyboard.\n     */\n    addUser(event) {\n        const name = document.getElementById(\"Add-user\").value;\n\n        if(event.keyCode === 13 && name !== \"\") {\n            event.preventDefault();\n            \n            // Placeholder id \n            const id = this.state.openId;\n\n            this.setState(prevState => ({\n                users: prevState.users.concat({id: id, name: name}),\n                openId: prevState.openId++\n            }));\n\n            document.getElementById(\"Add-user\").value = \"\";\n        }\n    }\n\n    /**\n     * Renders the UserList using React.\n     * \n     * @returns {JSX.Element} The current layout of our UserList.\n     */\n    render() {\n        const userList = this.state.users.map((user) => \n            <User key={user.id} \n                  name={user.name} \n                  onClick={() => this.handleClick(user.id)} />\n        );\n\n        return (\n            <div className=\"User-list\">\n                <input type=\"text\" \n                       placeholder=\"Enter username...\" \n                       id=\"Add-user\" \n                       onKeyDown={(event) => this.addUser(event)}/>\n                {userList}\n            </div>\n        );\n    }\n}\n\nexport default UserList;","import React from 'react';\nimport UserList from './userList';\n\n/**\n * PLACEHOLDER\n * \n * Initial set of users for now.\n */\nlet init_users = [\n  {id: 0, name: \"Michael\"},\n  {id: 1, name: \"Eric\"},\n  {id: 2, name: \"Sung\"},\n  {id: 3, name: \"Andrew\"}\n];\n\n/**\n * @constructor App representing the current front end for our application.\n */\nclass App extends React.Component {\n  \n  /**\n   * Renders the application with React.\n   * \n   * @returns {JSX.Element} The current layout of our application.\n   */\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>\n            Multimedia Platform\n          </h1>\n        </header>\n          <div class=\"row\">\n            <span class=\"Video-section\">YouTube videos go here</span>\n            <UserList users={init_users}/>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}